// Generated by Swift version 1.1 (swift-600.0.56.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class PFUser;
@class UISearchBar;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC4_b1y29AddCollaboratorViewController")
@interface AddCollaboratorViewController : UITableViewController
@property (nonatomic, copy) NSArray * potentialUsers;
@property (nonatomic) IBOutlet UISearchBar * searchBar;
- (void)users:(NSString *)input;
- (void)displayNoResults;
- (void)viewDidLoad;
- (instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface AddCollaboratorViewController (SWIFT_EXTENSION(_b1y)) <UISearchBarDelegate>
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface AddCollaboratorViewController (SWIFT_EXTENSION(_b1y)) <UITableViewDelegate, UITableViewDataSource>
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath;
@end

@class UIWindow;
@class UIApplication;
@class NSObject;
@class NSData;
@class NSURL;

SWIFT_CLASS("_TtC4_b1y11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic) UIWindow * window;
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;
- (void)applicationWillResignActive:(UIApplication *)application;
- (void)applicationDidEnterBackground:(UIApplication *)application;
- (void)applicationWillEnterForeground:(UIApplication *)application;
- (void)applicationDidBecomeActive:(UIApplication *)application;
- (void)applicationWillTerminate:(UIApplication *)application;
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;
@class UIButton;

SWIFT_CLASS("_TtC4_b1y19LoginViewController")
@interface LoginViewController : UIViewController
@property (nonatomic) IBOutlet UITextField * username;
@property (nonatomic) IBOutlet UITextField * password;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (IBAction)login:(UIButton *)sender;
- (IBAction)facebookLogin:(UIButton *)sender;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSDate (SWIFT_EXTENSION(_b1y))
@property (nonatomic, readonly, copy) NSString * mediumStringValue;
@property (nonatomic, readonly, copy) NSString * longStringValue;
@end

@class UILabel;

SWIFT_CLASS("_TtC4_b1y15SessionCellView")
@interface SessionCellView : UICollectionViewCell
@property (nonatomic) IBOutlet UILabel * name;
@property (nonatomic) IBOutlet UILabel * date;
@property (nonatomic) IBOutlet UILabel * host;
@property (nonatomic) IBOutlet UILabel * songLimit;
@property (nonatomic) IBOutlet UIButton * addSongs;
@property (nonatomic) IBOutlet UIButton * hostRequest;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;
@class UIBarButtonItem;

SWIFT_CLASS("_TtC4_b1y20SignUpViewController")
@interface SignUpViewController : UIViewController
@property (nonatomic, copy) NSArray * textFields;
@property (nonatomic, readonly) UIScrollView * scrollView;
- (void)viewDidLoad;

/// A helper function that creates the UI for the sign up form
- (void)createForm;

/// A function that is called when the user wishes to signup. It manages shaking the views which have invalid data and performing segues after the signup is successful.
- (void)signup;

/// The action called when the sign up button is pressed.
///
/// \param sender The Done UIBarButtonItem
- (void)signupButton:(UIBarButtonItem *)sender;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

@interface SignUpViewController (SWIFT_EXTENSION(_b1y)) <UITextFieldDelegate>

/// This is a callback function that is called when the user hits the return key on the keyboard
///
/// \param textField The textfield on which has the first responder when the return key is pressed
///
/// \returns Returns whether this should result in normal behaviour or not.
- (BOOL)textFieldShouldReturn:(UITextField *)textField;

/// This is a callback function that is called when the user finishes editing a text field.
///
/// <dl><dt>discussion</dt><dd><p>This manages scrolling the view to the right amount so that the field being edited is always shown to the user.</p></dd></dl>
/// \param textField The textfield which just finished editing.
- (void)textFieldDidBeginEditing:(UITextField *)textField;

/// A registered notification callback for when the keyboard is shown because the user tapped on a textfield.
///
/// <dl><dt>discussion</dt><dd><p>This function deals with creating an offset for the scroll view whenever the keyboard is shown so that the view does not think that it has the entire screen to draw in rather it has the screen minus the height of the keyboard.</p></dd></dl>
/// \param notification The notification that the keyboard is now shown.
- (void)keyboardShown:(NSNotification *)notification;

/// A registered notification callback for when the keyboard is shown because the textfields lost responder.
///
/// <dl><dt>discussion</dt><dd><p>This function deals with removing the offset created for the scroll view whenever the keyboard is hidden so that now the view knows that it has the entire screen to draw on again.</p></dd></dl>
/// \param notification The notification that the keyboard is now hidden.
- (void)keyboardHidden:(NSNotification *)notification;

/// This function handles callbacks for when the phone number field is being edited and is called each time a button on the keyboard is pressed.
///
/// \param sender The phone number text field.
- (void)phoneNumberMask:(id)sender;
@end

@class NSError;

@interface UIAlertController (SWIFT_EXTENSION(_b1y))

/// Use this function as a generic error displayer for the user. It displays a UIAlertController.
///
/// \param error The NSError that was generated.
///
/// \param controller The ViewController currently on the screen. Pass this in so that the function knows where to present the alert.
+ (void)displayError:(NSError *)error :(UIViewController *)controller;
@end


@interface UIView (SWIFT_EXTENSION(_b1y))

/// This is an extension to UIView which will create a standard shake animation to indicate to the user that something went wrong.
///
/// <dl><dt>see</dt><dd><p>shake:</p></dd></dl>
- (void)shakeForInvalidInput;

/// This function shakes a UIView with a spring timing curve using the parameters to create the animations.
///
/// \param iterations The number of times to shake the view back and forth before stopping
///
/// \param direction The direction in which to move the view for the first time
///
/// \param currentTimes The number of times the function has been performed. Use 0 to begin with.
///
/// \param size The size of the shake. i.e. how much to move the view
///
/// \param interval The amount of time for each 'shake'.
- (void)shakeWithIterations:(NSInteger)iterations direction:(NSInteger)direction currentTimes:(NSInteger)currentTimes size:(CGFloat)size interval:(NSTimeInterval)interval;
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC4_b1y14ViewController")
@interface ViewController : UICollectionViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)loadContent;
- (instancetype)initWithCollectionViewLayout:(UICollectionViewLayout *)layout OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;

@interface ViewController (SWIFT_EXTENSION(_b1y)) <UICollectionViewDataSource>
- (void)noResultsFound;
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView;
- (void)hostSession:(UIButton *)sender;
- (void)requestSong:(UIButton *)sender;
- (void)addSongsToSession:(UIButton *)sender;
- (void)checkRequests:(UIButton *)sender;
@end

#pragma clang diagnostic pop
